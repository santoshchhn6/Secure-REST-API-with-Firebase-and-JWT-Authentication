import { initializeApp } from "firebase/app";
import {
  getDatabase,
  ref,
  set,
  onValue,
  push,
  update,
  remove,
} from "firebase/database";

import * as dotenv from "dotenv";
dotenv.config();

const firebaseConfig = {
  apiKey: process.env.API_KEY,
  authDomain: process.env.AUTH_DOMAIN,
  databaseURL: process.env.DATABASE_URL,
  projectId: process.env.PROJECT_ID,
  storageBucket: process.env.STORAGE_BUCKET,
  messagingSenderId: process.env.MESSAGING_SENDER_ID,
  appId: process.env.APP_ID,
  measurementId: process.env.MEASUREMENT_ID,
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);

const db = getDatabase();

//add new user by given id, update if given id is exist in database
async function addUser(userId, name, email, imgUrl, age) {
  try {
    const userIdRef = ref(db, "user/" + userId);
    await set(userIdRef, {
      username: name,
      email: email,
      profile_picture: imgUrl,
      age: age,
    });
    return "User Added Successfully";
  } catch (err) {
    return err;
  }
}

//update user by given id,
async function updateUser(userId, name, email, imgUrl, age) {
  try {
    const userIdRef = ref(db, "user/" + userId);
    await update(userIdRef, {
      username: name,
      email: email,
      profile_picture: imgUrl,
      age: age,
    });
    return "User Update Successfully";
  } catch (err) {
    return err;
  }
}

//remove user by given id,
async function removeUser(userId) {
  try {
    const userIdRef = ref(db, "user/" + userId);
    await remove(userIdRef);
    return "User Deleted Successfully";
  } catch (error) {
    return error;
  }
}

// get User by given id
function getUser(userId) {
  const userRef = ref(db, "user/" + userId);
  onValue(userRef, (snapshot) => {
    const data = snapshot.val();
    console.log({ data });
  });
}

// get All Users
function getAllUsers() {
  const ageRef = ref(db, "user/");
  onValue(ageRef, (snapshot) => {
    const data = snapshot.val();
    console.log({ data });
  });
}

//add new User by random id
function addUserByRandomId(name, email, imgUrl, age) {
  const userRef = ref(db, "user/");
  //key generated by push is based on timestamp
  const newUserRef = push(userRef);
  set(newUserRef, {
    username: name,
    email: email,
    profile_picture: imgUrl,
    age: age,
  });
}

// // get User age by id in Realtime
// function getUserAgeById(userId) {
//   const ageRef = ref(db, "user/" + userId + "/age");
//   onValue(ageRef, (snapshot) => {
//     const data = snapshot.val();
//     console.log({ data });
//   });
// }

// //get all users when new user is added
// function getAllUsersAfterNewUserAdded() {
//   const userRef = ref(db, "user/");
//   onChildAdded(userRef, (data) => {
//     console.log("------------------");
//     console.log("id:" + data.key);
//     console.log(data.val());
//     console.log("------------------");
//   });
// }

// //get user which is updated in users collection
// function getUsersAfterUpdated() {
//   const userRef = ref(db, "user/");
//   onChildChanged(userRef, (data) => {
//     console.log("------------------");
//     console.log("id:" + data.key);
//     console.log(data.val());
//     console.log("------------------");
//   });
// }
